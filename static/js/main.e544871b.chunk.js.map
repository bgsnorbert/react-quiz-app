{"version":3,"sources":["components/selectValues.js","components/quizUserSettings.js","App.js","index.js"],"names":["difficulty","id","level","content","quiz_categories","QuizUserSettings","props","useState","input","category","userSettings","setUserSettings","handleChange","e","target","name","value","prevValue","className","htmlFor","onChange","type","map","res","onClick","settingsBtn","preventDefault","App","quizData","setQuizData","quizSettings","setQuizSettings","count","setCount","gameStart","setGameStart","showScore","setShowScore","score","setScore","scoreCount","setScoreCount","API_URL","useEffect","a","fetch","response","json","data","results","fetchMyAPI","randomArray","nextQuestion","eventValue","question","correctAns","correct_answer","userAns","allAns","length","handleResetBtn","incorrect_answers","sort","Math","random","dangerouslySetInnerHTML","__html","re","xmlns","width","height","fill","class","viewBox","d","includes","index","role","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e544871b.chunk.js","sourcesContent":["const quiz_categories = [\r\n  {\r\n    id: \"any\",\r\n    content: \"Any Category\",\r\n  },\r\n  {\r\n    id: 9,\r\n    content: \"General Knowledge\",\r\n  },\r\n  {\r\n    id: 10,\r\n    content: \"Entertainment: Books\",\r\n  },\r\n  {\r\n    id: 11,\r\n    content: \"Entertainment: Film\",\r\n  },\r\n  {\r\n    id: 12,\r\n    content: \"Entertainment: Music\",\r\n  },\r\n  {\r\n    id: 13,\r\n    content: \"Entertainment: Musicals & Theatres\",\r\n  },\r\n  {\r\n    id: 14,\r\n    content: \"Entertainment: Television\",\r\n  },\r\n  {\r\n    id: 15,\r\n    content: \"Entertainment: Video Games\",\r\n  },\r\n  {\r\n    id: 16,\r\n    content: \"Entertainment: Board Games\",\r\n  },\r\n  {\r\n    id: 17,\r\n    content: \"Science & Nature\",\r\n  },\r\n  {\r\n    id: 18,\r\n    content: \"Science: Computers\",\r\n  },\r\n  {\r\n    id: 20,\r\n    content: \"Mythology\",\r\n  },\r\n  {\r\n    id: 19,\r\n    content: \"Science: Mathematics\",\r\n  },\r\n  {\r\n    id: 21,\r\n    content: \"Sports\",\r\n  },\r\n  {\r\n    id: 22,\r\n    content: \"Geography\",\r\n  },\r\n  {\r\n    id: 23,\r\n    content: \"History\",\r\n  },\r\n  {\r\n    id: 24,\r\n    content: \"Politics\",\r\n  },\r\n  {\r\n    id: 25,\r\n    content: \"Art\",\r\n  },\r\n  {\r\n    id: 26,\r\n    content: \"Celebrities\",\r\n  },\r\n  {\r\n    id: 27,\r\n    content: \"Animals\",\r\n  },\r\n  {\r\n    id: 28,\r\n    content: \"Vehicles\",\r\n  },\r\n  {\r\n    id: 29,\r\n    content: \"Entertainment: Comics\",\r\n  },\r\n  {\r\n    id: 30,\r\n    content: \"Science: Gadgets\",\r\n  },\r\n  {\r\n    id: 31,\r\n    content: \"Entertainment: Japanese Anime & Manga\",\r\n  },\r\n  {\r\n    id: 32,\r\n    content: \"Entertainment: Cartoon & Animations\",\r\n  },\r\n];\r\n\r\nconst difficulty = [\r\n  {\r\n    id: 33,\r\n    level: \"any\",\r\n    content: \"Any Difficulty\",\r\n  },\r\n  {\r\n    id: 34,\r\n    level: \"easy\",\r\n    content: \"Easy\",\r\n  },\r\n  {\r\n    id: 35,\r\n    level: \"medium\",\r\n    content: \"Medium\",\r\n  },\r\n  {\r\n    id: 36,\r\n    level: \"hard\",\r\n    content: \"Hard\",\r\n  },\r\n];\r\n\r\nexport default quiz_categories;\r\nexport { difficulty };\r\n","import React, { useState } from \"react\";\r\nimport quiz_categories, { difficulty } from \"./selectValues\";\r\n\r\nfunction QuizUserSettings(props) {\r\n  const [userSettings, setUserSettings] = useState({\r\n    input: \"5\",\r\n    category: \"\",\r\n    difficulty: \"\",\r\n  });\r\n\r\n  // &category=9&difficulty=easy\r\n  function handleChange(e) {\r\n    const { name, value } = e.target;\r\n    if (name === \"gameLength\") {\r\n      if (value >= 1 && value <= 50) {\r\n        setUserSettings((prevValue) => {\r\n          return {\r\n            ...prevValue,\r\n            input: value,\r\n          };\r\n        });\r\n      }\r\n    } else if (name === \"quizCategory\") {\r\n      if (value !== \"any\") {\r\n        setUserSettings((prevValue) => {\r\n          return {\r\n            ...prevValue,\r\n            category: `&category=${value}`,\r\n          };\r\n        });\r\n      } else {\r\n        setUserSettings((prevValue) => {\r\n          return {\r\n            ...prevValue,\r\n            category: \"\",\r\n          };\r\n        });\r\n      }\r\n    } else if (name === \"quizDifficulty\") {\r\n      if (value !== \"any\") {\r\n        setUserSettings((prevValue) => {\r\n          return {\r\n            ...prevValue,\r\n            difficulty: `&difficulty=${value}`,\r\n          };\r\n        });\r\n      } else {\r\n        setUserSettings((prevValue) => {\r\n          return {\r\n            ...prevValue,\r\n            difficulty: \"\",\r\n          };\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <form>\r\n        <div className=\"mb-3\">\r\n          <label htmlFor=\"userInput\" className=\"form-label\">\r\n            Number of Questions (1-50)\r\n          </label>\r\n          <input\r\n            name=\"gameLength\"\r\n            value={userSettings.input}\r\n            onChange={handleChange}\r\n            type=\"number\"\r\n            className=\"form-control\"\r\n            id=\"userInput\"\r\n          />\r\n        </div>\r\n\r\n        <label htmlFor=\"selectCategory\" className=\"form-label\">\r\n          Select Category\r\n        </label>\r\n        <select\r\n          name=\"quizCategory\"\r\n          onChange={handleChange}\r\n          className=\"form-select\"\r\n          id=\"selectCategory\"\r\n        >\r\n          {quiz_categories.map((res) => {\r\n            return (\r\n              <option key={res.id} id={res.id} value={res.id}>\r\n                {res.content}\r\n              </option>\r\n            );\r\n          })}\r\n        </select>\r\n\r\n        <label htmlFor=\"selectDifficulty\" className=\"form-label\">\r\n          Select Difficulty\r\n        </label>\r\n        <select\r\n          name=\"quizDifficulty\"\r\n          onChange={handleChange}\r\n          className=\"form-select\"\r\n          id=\"selectDifficulty\"\r\n        >\r\n          {difficulty.map((res) => {\r\n            return (\r\n              <option key={res.id} id={res.id} value={res.level}>\r\n                {res.content}\r\n              </option>\r\n            );\r\n          })}\r\n        </select>\r\n\r\n        <button\r\n          onClick={(e) => {\r\n            props.settingsBtn(userSettings);\r\n            e.preventDefault();\r\n          }}\r\n          type=\"submit\"\r\n          className=\"btn btn-primary mt-5\"\r\n        >\r\n          Start Game\r\n        </button>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default QuizUserSettings;\r\n","import React, { useState, useEffect } from \"react\";\nimport QuizUserSettings from \"./components/quizUserSettings\";\n\nfunction App() {\n  const [quizData, setQuizData] = useState([]);\n  const [quizSettings, setQuizSettings] = useState({\n    input: \"5\",\n    category: \"\",\n    difficulty: \"\",\n  });\n  const [count, setCount] = useState(0);\n  const [gameStart, setGameStart] = useState(false);\n  const [showScore, setShowScore] = useState(false);\n  const [score, setScore] = useState([]);\n  const [scoreCount, setScoreCount] = useState(0);\n\n  let API_URL = `https://opentdb.com/api.php?amount=${quizSettings.input}${quizSettings.category}${quizSettings.difficulty}&type=multiple`;\n\n  useEffect(() => {\n    async function fetchMyAPI() {\n      let response = await fetch(API_URL);\n      let data = await response.json();\n      setQuizData(data.results);\n      // console.log(data.results);\n    }\n    fetchMyAPI();\n  }, [API_URL, quizSettings]);\n\n  function handleQuizSettings(userSettings) {\n    setQuizSettings(userSettings);\n    setGameStart(true);\n  }\n\n  let randomArray = [];\n  if (quizData.length > 0) {\n    randomArray = [\n      quizData[count].correct_answer,\n      ...quizData[count].incorrect_answers,\n    ].sort(() => Math.random() - 0.5);\n    // let newarray = [...randomArray];\n    // console.log(randomArray);\n    // console.log(newarray);\n  }\n\n  function nextQuestion(e) {\n    const eventValue = e.target.value;\n    // if(quizData.length > 0) {\n    setScore((prevValue) => {\n      return [\n        ...prevValue,\n        {\n          question: quizData[count].question,\n          correctAns: quizData[count].correct_answer,\n          userAns: eventValue,\n          // wrongAns: [quizData[count].incorrect_answers],\n          allAns: randomArray,\n        },\n      ];\n    });\n    // }\n    if (eventValue === quizData[count].correct_answer) {\n      setScoreCount(scoreCount + 1);\n    }\n    const countPlus = count + 1;\n    // console.log(eventValue);\n    if (countPlus < quizData.length) {\n      setCount(count + 1);\n    } else {\n      setShowScore(true);\n    }\n  }\n\n  function handleResetBtn() {\n    setScoreCount(0);\n    setScore([]);\n    setCount(0);\n    setQuizData([]);\n    setQuizSettings({\n      input: \"5\",\n      category: \"\",\n      difficulty: \"\",\n    });\n    setGameStart(false);\n    setShowScore(false);\n  }\n\n  return (\n    <div className=\"container App mt-5\">\n      {showScore ? (\n        <div className=\"row\">\n          <h5>Your score is: {`${scoreCount}/${quizData.length}`}</h5>\n          {score.map((res) => {\n            return (\n              <div>\n                <h3\n                  className=\"my-3 mt-5 text-center\"\n                  dangerouslySetInnerHTML={{\n                    __html: res.question,\n                  }}\n                />\n                <div className=\"row\">\n                  {res.allAns.map((re) => {\n                    return (\n                      <div className=\"col-6 my-1 text-center\">\n                        {re === res.correctAns && re === res.userAns ? (\n                          <span>\n                            <div\n                              className=\"d-inline-block my-1 text-success\"\n                              dangerouslySetInnerHTML={{\n                                __html: re,\n                              }}\n                            />\n                            <svg\n                              xmlns=\"http://www.w3.org/2000/svg\"\n                              width=\"32\"\n                              height=\"32\"\n                              fill=\"currentColor\"\n                              class=\"bi bi-check ms-2 d-inline-block text-success\"\n                              viewBox=\"0 0 16 16\"\n                            >\n                              <path d=\"M10.97 4.97a.75.75 0 0 1 1.07 1.05l-3.99 4.99a.75.75 0 0 1-1.08.02L4.324 8.384a.75.75 0 1 1 1.06-1.06l2.094 2.093 3.473-4.425a.267.267 0 0 1 .02-.022z\" />\n                            </svg>\n                          </span>\n                        ) : re.includes(res.userAns) ? (\n                          <span>\n                            <div\n                              className=\"d-inline-block my-1 text-danger\"\n                              dangerouslySetInnerHTML={{\n                                __html: re,\n                              }}\n                            />\n                            <svg\n                              xmlns=\"http://www.w3.org/2000/svg\"\n                              width=\"32\"\n                              height=\"32\"\n                              fill=\"currentColor\"\n                              class=\"bi bi-x ms-2 d-inline-block text-danger\"\n                              viewBox=\"0 0 16 16\"\n                            >\n                              <path d=\"M4.646 4.646a.5.5 0 0 1 .708 0L8 7.293l2.646-2.647a.5.5 0 0 1 .708.708L8.707 8l2.647 2.646a.5.5 0 0 1-.708.708L8 8.707l-2.646 2.647a.5.5 0 0 1-.708-.708L7.293 8 4.646 5.354a.5.5 0 0 1 0-.708z\" />\n                            </svg>\n                          </span>\n                        ) : re.includes(res.correctAns) ? (\n                          <div\n                            className=\" my-1 text-success\"\n                            dangerouslySetInnerHTML={{\n                              __html: re,\n                            }}\n                          />\n                        ) : (\n                          <div\n                            className=\"my-1\"\n                            dangerouslySetInnerHTML={{\n                              __html: re,\n                            }}\n                          />\n                        )}\n                      </div>\n                    );\n                  })}\n                </div>\n              </div>\n            );\n          })}\n          <button\n            onClick={handleResetBtn}\n            className=\"my-5 w-25 text-center mx-auto\"\n          >\n            New Game\n          </button>\n        </div>\n      ) : (\n        <div>\n          {gameStart ? (\n            <div>\n              {quizData.length > 0 ? (\n                <div>\n                  <span>Category: {quizData[count].category}</span>\n                  <br />\n                  <span>Difficulty: {quizData[count].difficulty}</span>\n                  <br />\n                  <span>{`${count + 1}/${quizData.length}`}</span>\n                  <br />\n                  <button\n                    onClick={handleResetBtn}\n                    type=\"button\"\n                    className=\"btn btn-outline-info text-white my-1\"\n                  >\n                    reset game\n                  </button>\n                  <h2 className=\"text-center\"\n                    dangerouslySetInnerHTML={{\n                      __html: quizData[count].question,\n                    }}\n                  />\n                  <div className=\"row mt-5\">\n                    {randomArray.map((res, index) => {\n                      return (\n                        <div key={index} className=\"col-6 text-center\">\n                          <button\n                            value={res}\n                            onClick={nextQuestion}\n                            dangerouslySetInnerHTML={{ __html: res }}\n                            className=\"btn btn-info ans my-2\"\n                          />\n                        </div>\n                      );\n                    })}\n                  </div>\n                </div>\n              ) : (\n                <div\n                  className=\"spinner-border text-white text-center\"\n                  role=\"status\"\n                >\n                  <span className=\"sr-only\"></span>\n                </div>\n              )}\n            </div>\n          ) : (\n            <div className=\"row\">\n              <div className=\"col text-center mt-5\">\n                <QuizUserSettings settingsBtn={handleQuizSettings} />\n              </div>\n            </div>\n          )}\n\n          <div className=\"row mt-5\"></div>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}